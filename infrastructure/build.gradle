import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.jetbrains.kotlin.kapt'
    id 'org.jetbrains.kotlin.plugin.spring'

    id 'org.springframework.boot'
    id 'io.spring.dependency-management'

    id 'org.openapi.generator'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation project(':domain')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    compileOnly 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.13'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.13'
    implementation 'org.springdoc:springdoc-openapi-kotlin:1.6.13'

    // OpenAPI Generator
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

    // MapStruct
    implementation "org.mapstruct:mapstruct:$mapStructVersion"
    kapt "org.mapstruct:mapstruct-processor:$mapStructVersion"

    // Rest Assured
    testImplementation 'io.rest-assured:json-path'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.rest-assured:json-schema-validator'
    testImplementation 'io.rest-assured:spring-mock-mvc'

    runtimeOnly 'org.springframework.boot:spring-boot-properties-migrator'
}


//sourceSets {
//    main {
//        kotlin.srcDirs += "$buildDir/generated/open-api/src/main/kotlin"
//    }
//}

sourceSets {
    main {
        java.srcDirs += layout.buildDirectory.dir("generated-sources/open-api/src/main/java")
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

def basePackage = 'com.digilinq.platform.users.web.generated.v1'

openApiGenerate {
    generatorName = 'spring'
    library = 'spring-boot'
    inputSpec = "$projectDir/src/main/resources/open-api/server/users-api-oas.yaml"
    outputDir = "${layout.buildDirectory.get().asFile}/generated-sources/open-api"
    packageName = basePackage
    apiPackage = "${basePackage}.api"
    modelPackage = "${basePackage}.model"
    invokerPackage = "${basePackage}.invoker"
    enablePostProcessFile = true
    skipOverwrite = false
    configOptions = [
            // useSpringBoot3      : "ture",
            interfaceOnly       : "true",
            enumPropertyNaming  : "original",
            serializationLibrary: "jackson",
            dateLibrary         : "java8",
    ]
//    typeMappings = [
//            'OffsetDateTime'          : 'LocalDateTime',
//            'java.time.OffsetDateTime': 'java.time.LocalDateTime'
//    ]
//    importMappings = [
//            'OffsetDateTime'          : 'LocalDateTime',
//            'java.time.OffsetDateTime': 'java.time.LocalDateTime'
//    ]
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.named('check') {
    dependsOn(tasks.integrationTest)
}

tasks.withType(KotlinCompile).configureEach {
    dependsOn("openApiGenerate")
}

tasks.compileTestKotlin.dependsOn tasks.openApiGenerate
